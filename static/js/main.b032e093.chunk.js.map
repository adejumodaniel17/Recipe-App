{"version":3,"sources":["Recipe.js","App.js","serviceWorker.js","index.js","recipe.module.css"],"names":["Recipe","props","className","style","recipe","label","ingredients","map","ingredient","text","parseFloat","calories","toFixed","src","image","dotenv","config","App","useState","search","setSearch","query","setQuery","recipes","setRecipes","useEffect","getRecipes","a","fetch","response","json","data","hits","console","log","onSubmit","e","preventDefault","type","value","onChange","target","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","module","exports"],"mappings":"kQAceA,EAXA,SAACC,GAAD,OACX,yBAAKC,UAAWC,IAAMC,QAClB,4BAAKH,EAAMG,OAAOC,OAClB,4BACKJ,EAAMG,OAAOE,YAAYC,KAAI,SAAAC,GAAU,OAAK,4BAAKA,EAAWC,UAEjE,4BAAKC,WAAWT,EAAMG,OAAOO,UAAUC,QAAQ,GAA/C,QACA,yBAAKC,IAAKZ,EAAMG,OAAOU,MAAOZ,UAAWC,IAAMW,U,MCLvDC,IAAOC,SAMP,IA2CeC,EAxCH,WAAO,IAAD,EACYC,mBAAS,IADrB,mBACTC,EADS,KACDC,EADC,OAEUF,mBAAS,WAFnB,mBAETG,EAFS,KAEFC,EAFE,OAGcJ,mBAAS,IAHvB,mBAGTK,EAHS,KAGAC,EAHA,KAKhBC,qBAAU,WACRC,MACC,CAACL,IAEJ,IAAMK,EAAU,uCAAG,8BAAAC,EAAA,sEACMC,MAAM,mCAAD,OAAoCP,EAApC,mBAbnB,WAamB,oBAZlB,qCAWO,cACXQ,EADW,gBAEEA,EAASC,OAFX,OAEXC,EAFW,OAGjBP,EAAWO,EAAKC,MAChBC,QAAQC,IAAIH,EAAKC,MAJA,2CAAH,qDAkBhB,OACE,yBAAK9B,UAAU,OACb,0BAAMiC,SATW,SAAAC,GACnBA,EAAEC,iBAEFf,EAASH,GACTC,EAAU,KAKsBlB,UAAU,eACtC,2BAAOA,UAAU,aAAaoC,KAAK,OAAOC,MAAOpB,EAAQqB,SAd1C,SAAAJ,GACnBhB,EAAUgB,EAAEK,OAAOF,UAcf,4BAAQrC,UAAU,iBAAlB,WAEF,yBAAKA,UAAU,WACZqB,EAAQhB,KAAI,SAAAH,GAAM,OAAK,kBAAC,EAAD,CAAQsC,IAAKtC,EAAOA,OAAOC,MAAOD,OAAQA,EAAOA,eCpC7DuC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,SD2HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1B,QAAQ0B,MAAMA,EAAMC,a,kBExI5BC,EAAOC,QAAU,CAAC,OAAS,uBAAuB,MAAQ,wB","file":"static/js/main.b032e093.chunk.js","sourcesContent":["import React from 'react'\r\nimport style from './recipe.module.css'\r\n\r\nconst Recipe = (props) => (\r\n    <div className={style.recipe}>\r\n        <h1>{props.recipe.label}</h1>\r\n        <ol>\r\n            {props.recipe.ingredients.map(ingredient => (<li>{ingredient.text}</li>))}\r\n        </ol>\r\n        <h3>{parseFloat(props.recipe.calories).toFixed(2)}kcal</h3>\r\n        <img src={props.recipe.image} className={style.image} />\r\n    </div>\r\n)\r\n\r\nexport default Recipe;","import React, { useState, useEffect } from 'react';\nimport dotenv from 'dotenv'\nimport Recipe from './Recipe'\nimport './App.css';\n\ndotenv.config();\n\n\n//const API_ID = process.env.API_ID\n//const API_KEY = process.env.API_KEY\n\nconst API_ID=\"5b825bb6\"\nconst API_KEY=\"724259bfbbaa7a4e13d32bd36a7d3ebf\"\n\nconst App = () => {\n  const [search, setSearch] = useState(\"\");\n  const [query, setQuery] = useState(\"chicken\");\n  const [recipes, setRecipes] = useState([]);\n\n  useEffect(() => {\n    getRecipes();\n  }, [query])\n\n  const getRecipes = async () => {\n    const response = await fetch(`https://api.edamam.com/search?q=${query}&app_id=${API_ID}&app_key=${API_KEY}`)\n    const data = await response.json();\n    setRecipes(data.hits);\n    console.log(data.hits);\n  }\n\n  const handleSearch = e => {\n    setSearch(e.target.value);\n  }\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    setQuery(search);\n    setSearch(\"\");\n  }\n\n  return (\n    <div className=\"App\">\n      <form onSubmit={handleSubmit} className=\"search-form\">\n        <input className=\"search-bar\" type=\"text\" value={search} onChange={handleSearch} />\n        <button className=\"search-button\">Submit</button>\n      </form>\n      <div className=\"recipes\">\n        {recipes.map(recipe => (<Recipe key={recipe.recipe.label} recipe={recipe.recipe} />))}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"recipe\":\"recipe_recipe__3HVJn\",\"image\":\"recipe_image__38S9W\"};"],"sourceRoot":""}